use std::f64::consts::E;

/// block reward calculator.
/// Block reward follows gompertz-curve scenario.
pub struct RewardBuilder {
    /// total block reward
    k: f64,
    b: f64,
    c: f64,
    /// total minutes of a year
    ybnum: f64,
    x0: f64,
}

impl RewardBuilder {
    pub fn new(total_supply: u64) -> Self {
        RewardBuilder {
            k: total_supply as f64,
            b: 0.4,
            c: 3.6,
            ybnum: (365 * 24 * 60) as f64,
            x0: -0.4,
        }
    }

    /// If a fraction is less than 0.5, it is rounded down.
    /// if a fraction is greater than 0.5, it is rounded up.
    /// if a fraction is just 0.5, round down or round up,
    /// whichever results in an even number.
    fn round_to_even(f: f64) -> u64 {
        assert!(0.0 <= f);
        let cast = f as u64;
        let diff = f - cast as f64;
        if diff == 0.5 {
            if cast % 2 == 0 {
                cast
            } else {
                cast + 1
            }
        } else if diff < 0.5 {
            cast
        } else {
            cast + 1
        }
    }

    /// get block reward of height
    pub fn calc_block_reward(&self, height: u32) -> u64 {
        // note: height 0 reward is zero but return not zero number
        let x = self.x0 + (height as f64 / self.ybnum / 10.0);
        let e = (-self.c * x).exp();
        let r = self.c * self.b.log(E) * e * self.b.powf(e) / self.ybnum / 10.0;
        RewardBuilder::round_to_even(-self.k * r)
    }

    /// dummy: height 0 total supply
    fn base_total_supply(&self) -> u64 {
        let e0 = (-self.c * self.x0).exp();
        let supply = self.k * self.b.powf(e0);
        RewardBuilder::round_to_even(supply) - self.calc_block_reward(0)
    }

    /// get total supply at height
    pub fn calc_total_supply(&self, height: u32) -> u64 {
        let x = self.x0 + (height as f64 / self.ybnum / 10.0);
        let e = (-self.c * x).exp();
        let supply = self.k * self.b.powf(e);
        RewardBuilder::round_to_even(supply) - self.base_total_supply()
    }
}

#[test]
fn reward() {
    let reward_list: [u64; 500] = [
        553963004, 553964092, 553965180, 553966268, 553967356, 553968444, 553969532, 553970620, 553971708,
        553972796, 553973884, 553974972, 553976060, 553977148, 553978236, 553979324, 553980412, 553981500,
        553982588, 553983676, 553984764, 553985852, 553986940, 553988028, 553989116, 553990204, 553991292,
        553992380, 553993468, 553994556, 553995644, 553996732, 553997820, 553998908, 553999996, 554001084,
        554002172, 554003260, 554004348, 554005436, 554006524, 554007612, 554008700, 554009788, 554010876,
        554011964, 554013052, 554014140, 554015228, 554016316, 554017404, 554018492, 554019580, 554020668,
        554021756, 554022844, 554023932, 554025020, 554026108, 554027196, 554028284, 554029372, 554030460,
        554031548, 554032636, 554033724, 554034812, 554035900, 554036988, 554038076, 554039164, 554040252,
        554041341, 554042429, 554043517, 554044605, 554045693, 554046781, 554047869, 554048957, 554050045,
        554051133, 554052221, 554053309, 554054397, 554055485, 554056573, 554057661, 554058749, 554059837,
        554060925, 554062014, 554063102, 554064190, 554065278, 554066366, 554067454, 554068542, 554069630,
        554070718, 554071806, 554072894, 554073982, 554075070, 554076159, 554077247, 554078335, 554079423,
        554080511, 554081599, 554082687, 554083775, 554084863, 554085951, 554087039, 554088127, 554089216,
        554090304, 554091392, 554092480, 554093568, 554094656, 554095744, 554096832, 554097920, 554099008,
        554100097, 554101185, 554102273, 554103361, 554104449, 554105537, 554106625, 554107713, 554108801,
        554109890, 554110978, 554112066, 554113154, 554114242, 554115330, 554116418, 554117506, 554118594,
        554119683, 554120771, 554121859, 554122947, 554124035, 554125123, 554126211, 554127300, 554128388,
        554129476, 554130564, 554131652, 554132740, 554133828, 554134916, 554136005, 554137093, 554138181,
        554139269, 554140357, 554141445, 554142533, 554143622, 554144710, 554145798, 554146886, 554147974,
        554149062, 554150151, 554151239, 554152327, 554153415, 554154503, 554155591, 554156680, 554157768,
        554158856, 554159944, 554161032, 554162120, 554163209, 554164297, 554165385, 554166473, 554167561,
        554168649, 554169738, 554170826, 554171914, 554173002, 554174090, 554175178, 554176267, 554177355,
        554178443, 554179531, 554180619, 554181708, 554182796, 554183884, 554184972, 554186060, 554187149,
        554188237, 554189325, 554190413, 554191501, 554192590, 554193678, 554194766, 554195854, 554196942,
        554198031, 554199119, 554200207, 554201295, 554202383, 554203472, 554204560, 554205648, 554206736,
        554207824, 554208913, 554210001, 554211089, 554212177, 554213266, 554214354, 554215442, 554216530,
        554217618, 554218707, 554219795, 554220883, 554221971, 554223060, 554224148, 554225236, 554226324,
        554227413, 554228501, 554229589, 554230677, 554231766, 554232854, 554233942, 554235030, 554236118,
        554237207, 554238295, 554239383, 554240471, 554241560, 554242648, 554243736, 554244824, 554245913,
        554247001, 554248089, 554249178, 554250266, 554251354, 554252442, 554253531, 554254619, 554255707,
        554256795, 554257884, 554258972, 554260060, 554261148, 554262237, 554263325, 554264413, 554265502,
        554266590, 554267678, 554268766, 554269855, 554270943, 554272031, 554273120, 554274208, 554275296,
        554276384, 554277473, 554278561, 554279649, 554280738, 554281826, 554282914, 554284002, 554285091,
        554286179, 554287267, 554288356, 554289444, 554290532, 554291621, 554292709, 554293797, 554294885,
        554295974, 554297062, 554298150, 554299239, 554300327, 554301415, 554302504, 554303592, 554304680,
        554305769, 554306857, 554307945, 554309034, 554310122, 554311210, 554312298, 554313387, 554314475,
        554315563, 554316652, 554317740, 554318828, 554319917, 554321005, 554322093, 554323182, 554324270,
        554325358, 554326447, 554327535, 554328624, 554329712, 554330800, 554331889, 554332977, 554334065,
        554335154, 554336242, 554337330, 554338419, 554339507, 554340595, 554341684, 554342772, 554343860,
        554344949, 554346037, 554347125, 554348214, 554349302, 554350391, 554351479, 554352567, 554353656,
        554354744, 554355832, 554356921, 554358009, 554359098, 554360186, 554361274, 554362363, 554363451,
        554364539, 554365628, 554366716, 554367805, 554368893, 554369981, 554371070, 554372158, 554373246,
        554374335, 554375423, 554376512, 554377600, 554378688, 554379777, 554380865, 554381954, 554383042,
        554384130, 554385219, 554386307, 554387396, 554388484, 554389572, 554390661, 554391749, 554392838,
        554393926, 554395014, 554396103, 554397191, 554398280, 554399368, 554400457, 554401545, 554402633,
        554403722, 554404810, 554405899, 554406987, 554408076, 554409164, 554410252, 554411341, 554412429,
        554413518, 554414606, 554415695, 554416783, 554417871, 554418960, 554420048, 554421137, 554422225,
        554423314, 554424402, 554425490, 554426579, 554427667, 554428756, 554429844, 554430933, 554432021,
        554433110, 554434198, 554435286, 554436375, 554437463, 554438552, 554439640, 554440729, 554441817,
        554442906, 554443994, 554445083, 554446171, 554447260, 554448348, 554449436, 554450525, 554451613,
        554452702, 554453790, 554454879, 554455967, 554457056, 554458144, 554459233, 554460321, 554461410,
        554462498, 554463587, 554464675, 554465764, 554466852, 554467941, 554469029, 554470118, 554471206,
        554472295, 554473383, 554474472, 554475560, 554476649, 554477737, 554478826, 554479914, 554481003,
        554482091, 554483180, 554484268, 554485357, 554486445, 554487534, 554488622, 554489711, 554490799,
        554491888, 554492976, 554494065, 554495153, 554496242, 554497330, 554498419, 554499507, 554500596,
        554501684, 554502773, 554503861, 554504950, 554506038,
    ];
    let g = RewardBuilder::new(10000000000000000);
    for (height, reward) in reward_list.iter().enumerate() {
        let height = height as u32;
        assert_eq!(g.calc_block_reward(height), *reward, "height={}", height);
    }
}

#[test]
fn supply() {
    #[rustfmt::skip]
    let supply_list: [u64; 500] = [
        553963004, 1107926553, 1661891189, 2215856913, 2769823725, 3323791625, 3877760613,
        4431730690, 4985701854, 5539674106, 6093647446, 6647621874, 7201597390, 7755573994,
        8309551685, 8863530465, 9417510333, 9971491289, 10525473333, 11079456465, 11633440685,
        12187425992, 12741412388, 13295399872, 13849388444, 14403378103, 14957368851, 15511360687,
        16065353610, 16619347622, 17173342722, 17727338909, 18281336185, 18835334549, 19389334001,
        19943334540, 20497336168, 21051338883, 21605342687, 22159347579, 22713353559, 23267360626,
        23821368782, 24375378026, 24929388357, 25483399777, 26037412285, 26591425881, 27145440564,
        27699456336, 28253473196, 28807491144, 29361510180, 29915530304, 30469551516, 31023573815,
        31577597204, 32131621679, 32685647244, 33239673896, 33793701636, 34347730464, 34901760380,
        35455791384, 36009823476, 36563856657, 37117890925, 37671926281, 38225962725, 38780000258,
        39334038878, 39888078587, 40442119383, 40996161267, 41550204240, 42104248301, 42658293449,
        43212339686, 43766387011, 44320435424, 44874484925, 45428535514, 45982587191, 46536639956,
        47090693809, 47644748750, 48198804779, 48752861897, 49306920102, 49860979395, 50415039777,
        50969101246, 51523163804, 52077227450, 52631292183, 53185358005, 53739424915, 54293492913,
        54847561999, 55401632173, 55955703435, 56509775785, 57063849224, 57617923750, 58171999365,
        58726076067, 59280153858, 59834232736, 60388312703, 60942393758, 61496475901, 62050559132,
        62604643451, 63158728858, 63712815354, 64266902937, 64820991609, 65375081368, 65929172216,
        66483264152, 67037357176, 67591451287, 68145546488, 68699642776, 69253740152, 69807838616,
        70361938169, 70916038810, 71470140538, 72024243355, 72578347260, 73132452253, 73686558334,
        74240665503, 74794773761, 75348883106, 75902993540, 76457105062, 77011217671, 77565331369,
        78119446155, 78673562029, 79227678992, 79781797042, 80335916181, 80890036407, 81444157722,
        81998280125, 82552403616, 83106528195, 83660653863, 84214780618, 84768908462, 85323037394,
        85877167413, 86431298521, 86985430717, 87539564002, 88093698374, 88647833835, 89201970383,
        89756108020, 90310246745, 90864386558, 91418527460, 91972669449, 92526812526, 93080956692,
        93635101946, 94189248288, 94743395718, 95297544237, 95851693843, 96405844538, 96959996320,
        97514149191, 98068303150, 98622458198, 99176614333, 99730771557, 100284929868, 100839089268,
        101393249757, 101947411333, 102501573997, 103055737750, 103609902591, 104164068520, 104718235537,
        105272403642, 105826572835, 106380743117, 106934914487, 107489086945, 108043260491, 108597435126,
        109151610848, 109705787659, 110259965558, 110814144545, 111368324620, 111922505784, 112476688035,
        113030871375, 113585055803, 114139241319, 114693427924, 115247615617, 115801804397, 116355994266,
        116910185224, 117464377269, 118018570403, 118572764625, 119126959935, 119681156333, 120235353819,
        120789552394, 121343752057, 121897952808, 122452154647, 123006357575, 123560561591, 124114766694,
        124668972887, 125223180167, 125777388536, 126331597992, 126885808537, 127440020171, 127994232892,
        128548446702, 129102661599, 129656877586, 130211094660, 130765312823, 131319532073, 131873752413,
        132427973840, 132982196355, 133536419959, 134090644651, 134644870431, 135199097300, 135753325256,
        136307554301, 136861784434, 137416015656, 137970247965, 138524481363, 139078715849, 139632951423,
        140187188086, 140741425837, 141295664676, 141849904604, 142404145619, 142958387723, 143512630915,
        144066875195, 144621120564, 145175367021, 145729614566, 146283863199, 146838112921, 147392363731,
        147946615629, 148500868616, 149055122690, 149609377853, 150163634104, 150717891444, 151272149872,
        151826409388, 152380669992, 152934931685, 153489194466, 154043458335, 154597723292, 155151989338,
        155706256472, 156260524694, 156814794005, 157369064403, 157923335890, 158477608466, 159031882129,
        159586156881, 160140432722, 160694709650, 161248987667, 161803266772, 162357546965, 162911828247,
        163466110617, 164020394075, 164574678622, 165128964257, 165683250980, 166237538791, 166791827691,
        167346117679, 167900408755, 168454700920, 169008994173, 169563288514, 170117583944, 170671880462,
        171226178068, 171780476763, 172334776545, 172889077417, 173443379376, 173997682424, 174551986560,
        175106291784, 175660598097, 176214905498, 176769213987, 177323523565, 177877834231, 178432145985,
        178986458828, 179540772759, 180095087778, 180649403886, 181203721082, 181758039366, 182312358739,
        182866679200, 183421000749, 183975323387, 184529647113, 185083971927, 185638297830, 186192624821,
        186746952900, 187301282068, 187855612324, 188409943668, 188964276101, 189518609622, 190072944231,
        190627279929, 191181616715, 191735954589, 192290293553, 192844633603, 193398974743, 193953316971,
        194507660287, 195062004692, 195616350185, 196170696766, 196725044436, 197279393194, 197833743040,
        198388093975, 198942445998, 199496799109, 200051153309, 200605508598, 201159864974, 201714222439,
        202268580993, 202822940634, 203377301364, 203931663183, 204486026090, 205040390085, 205594755168,
        206149121341, 206703488601, 207257856950, 207812226387, 208366596912, 208920968526, 209475341228,
        210029715019, 210584089898, 211138465866, 211692842921, 212247221066, 212801600299, 213355980620,
        213910362029, 214464744527, 215019128113, 215573512788, 216127898551, 216682285402, 217236673342,
        217791062370, 218345452487, 218899843692, 219454235985, 220008629367, 220563023838, 221117419396,
        221671816043, 222226213779, 222780612603, 223335012515, 223889413516, 224443815605, 224998218783,
        225552623049, 226107028404, 226661434846, 227215842378, 227770250997, 228324660705, 228879071502,
        229433483387, 229987896361, 230542310422, 231096725573, 231651141811, 232205559139, 232759977554,
        233314397058, 233868817651, 234423239332, 234977662101, 235532085959, 236086510905, 236640936940,
        237195364063, 237749792274, 238304221574, 238858651963, 239413083440, 239967516005, 240521949659,
        241076384401, 241630820232, 242185257151, 242739695159, 243294134255, 243848574440, 244403015713,
        244957458074, 245511901524, 246066346062, 246620791689, 247175238404, 247729686208, 248284135100,
        248838585081, 249393036150, 249947488308, 250501941554, 251056395889, 251610851312, 252165307823,
        252719765423, 253274224112, 253828683889, 254383144754, 254937606708, 255492069751, 256046533882,
        256600999101, 257155465409, 257709932805, 258264401290, 258818870863, 259373341525, 259927813276,
        260482286114, 261036760042, 261591235057, 262145711162, 262700188354, 263254666636, 263809146006,
        264363626464, 264918108011, 265472590646, 266027074370, 266581559182, 267136045083, 267690532072,
        268245020150, 268799509316, 269353999571, 269908490914, 270462983346, 271017476867, 271571971475,
        272126467173, 272680963959, 273235461833, 273789960796, 274344460848, 274898961988, 275453464216,
        276007967533, 276562471939, 277116977433,
    ];
    let g = RewardBuilder::new(10000000000000000);
    for (height, supply) in supply_list.iter().enumerate() {
        let height = height as u32;
        assert_eq!(g.calc_total_supply(height), *supply, "height={}", height);
    }
}
