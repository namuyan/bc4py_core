use crate::python::pyaddr::PyAddress;
use crate::tx::{TxInput, TxOutput};
use crate::utils::*;
use pyo3::prelude::*;
use pyo3::types::PyBytes;

#[pyclass]
pub struct PyUnspent {
    pub input: TxInput,
    pub output: TxOutput,
}

#[pymethods]
impl PyUnspent {
    // note: no __init__ method because generated by iterator
    #[getter(txhash)]
    fn get_txhash(&self, py: Python) -> PyObject {
        let hash = u256_to_bytes(&self.input.0);
        PyBytes::new(py, hash.as_ref()).to_object(py)
    }

    #[getter(txindex)]
    fn get_txindex(&self) -> u8 {
        self.input.1
    }

    #[getter(address)]
    fn get_address(&self) -> PyAddress {
        PyAddress {
            addr: self.output.0,
        }
    }

    #[getter(coin_id)]
    fn get_coin_id(&self) -> u32 {
        self.output.1
    }

    #[getter(amount)]
    fn get_amount(&self) -> u64 {
        self.output.2
    }
}

impl PyUnspent {
    pub fn clone_input(&self) -> TxInput {
        self.input.clone()
    }
}
